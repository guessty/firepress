"use strict";

require("core-js/modules/web.dom.iterable");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var path = require('path');

var requireFoolWebpack = require('require-fool-webpack');

var withTypescript = require('@zeit/next-typescript'); //


var dir = path.resolve('.');
var appDir = './src/app';
var functionsDir = './src/functions';
var distDir = './dist';
var publicDistDir = './dist/public';
var functionsDistDir = './dist/functions';
var nextDistDir = "./../../".concat(distDir, "/functions/app");
var defaultConfig = {
  app: {
    dir: appDir,
    next: {
      webpack: function webpack(config, options) {
        return config;
      }
    }
  },
  firebase: {
    projectId: '<projectId>'
  },
  functions: {
    dir: functionsDir
  },
  // plugins: [],
  rewrites: []
};
var configSource = path.join(dir, 'firestudio.config');
var customConfig = defaultConfig;

try {
  customConfig = requireFoolWebpack(configSource);
} catch (_unused) {
  console.log('Using default app config');
}

var appConfig = customConfig.app || defaultConfig.app;
var appNextConfig = appConfig.next || defaultConfig.app.next;
var firebaseConfig = customConfig.firebase || defaultConfig.firebase;
var functionsConfig = customConfig.functions || defaultConfig.functions;
var rewritesConfig = customConfig.rewrites || defaultConfig.rewrites; // const pluginsConfig = customConfig.plugins || defaultConfig.plugins

var appPath = path.join(dir, appDir);
var router = requireFoolWebpack(path.join(appPath, 'router'));

var nextConfig = _objectSpread({}, appNextConfig, {
  dir: appDir,
  distDir: nextDistDir,
  assetPrefix: '',
  exportPathMap: function exportPathMap() {
    return router.staticRoutes;
  }
});

var config = {
  app: _objectSpread({}, appConfig, {
    dir: appDir,
    next: withTypescript(nextConfig)
  }),
  firebase: firebaseConfig,
  functions: _objectSpread({}, functionsConfig, {
    dir: functionsDir
  }),
  rewrites: rewritesConfig,
  // plugins: pluginsConfig,
  dist: {
    dir: distDir,
    public: {
      dir: publicDistDir
    },
    functions: {
      dir: functionsDistDir
    }
  }
};
module.exports = config;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYnVpbGQvY29uZmlnLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwicmVxdWlyZUZvb2xXZWJwYWNrIiwid2l0aFR5cGVzY3JpcHQiLCJkaXIiLCJyZXNvbHZlIiwiYXBwRGlyIiwiZnVuY3Rpb25zRGlyIiwiZGlzdERpciIsInB1YmxpY0Rpc3REaXIiLCJmdW5jdGlvbnNEaXN0RGlyIiwibmV4dERpc3REaXIiLCJkZWZhdWx0Q29uZmlnIiwiYXBwIiwibmV4dCIsIndlYnBhY2siLCJjb25maWciLCJvcHRpb25zIiwiZmlyZWJhc2UiLCJwcm9qZWN0SWQiLCJmdW5jdGlvbnMiLCJyZXdyaXRlcyIsImNvbmZpZ1NvdXJjZSIsImpvaW4iLCJjdXN0b21Db25maWciLCJjb25zb2xlIiwibG9nIiwiYXBwQ29uZmlnIiwiYXBwTmV4dENvbmZpZyIsImZpcmViYXNlQ29uZmlnIiwiZnVuY3Rpb25zQ29uZmlnIiwicmV3cml0ZXNDb25maWciLCJhcHBQYXRoIiwicm91dGVyIiwibmV4dENvbmZpZyIsImFzc2V0UHJlZml4IiwiZXhwb3J0UGF0aE1hcCIsInN0YXRpY1JvdXRlcyIsImRpc3QiLCJwdWJsaWMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsSUFBTUMsa0JBQWtCLEdBQUdELE9BQU8sQ0FBQyxzQkFBRCxDQUFsQzs7QUFDQSxJQUFNRSxjQUFjLEdBQUdGLE9BQU8sQ0FBQyx1QkFBRCxDQUE5QixDLENBQ0E7OztBQUNBLElBQU1HLEdBQUcsR0FBR0osSUFBSSxDQUFDSyxPQUFMLENBQWEsR0FBYixDQUFaO0FBRUEsSUFBTUMsTUFBTSxHQUFHLFdBQWY7QUFDQSxJQUFNQyxZQUFZLEdBQUcsaUJBQXJCO0FBQ0EsSUFBTUMsT0FBTyxHQUFHLFFBQWhCO0FBQ0EsSUFBTUMsYUFBYSxHQUFHLGVBQXRCO0FBQ0EsSUFBTUMsZ0JBQWdCLEdBQUcsa0JBQXpCO0FBQ0EsSUFBTUMsV0FBVyxxQkFBY0gsT0FBZCxtQkFBakI7QUFFQSxJQUFNSSxhQUFhLEdBQUc7QUFDcEJDLEVBQUFBLEdBQUcsRUFBRTtBQUNIVCxJQUFBQSxHQUFHLEVBQUVFLE1BREY7QUFFSFEsSUFBQUEsSUFBSSxFQUFFO0FBQ0pDLE1BQUFBLE9BREksbUJBQ0tDLE1BREwsRUFDYUMsT0FEYixFQUNzQjtBQUN4QixlQUFPRCxNQUFQO0FBQ0Q7QUFIRztBQUZILEdBRGU7QUFTcEJFLEVBQUFBLFFBQVEsRUFBRTtBQUNSQyxJQUFBQSxTQUFTLEVBQUU7QUFESCxHQVRVO0FBWXBCQyxFQUFBQSxTQUFTLEVBQUU7QUFDVGhCLElBQUFBLEdBQUcsRUFBRUc7QUFESSxHQVpTO0FBZXBCO0FBQ0FjLEVBQUFBLFFBQVEsRUFBRTtBQWhCVSxDQUF0QjtBQW1CQSxJQUFNQyxZQUFZLEdBQUd0QixJQUFJLENBQUN1QixJQUFMLENBQVVuQixHQUFWLEVBQWUsbUJBQWYsQ0FBckI7QUFFQSxJQUFJb0IsWUFBWSxHQUFHWixhQUFuQjs7QUFFQSxJQUFJO0FBQ0ZZLEVBQUFBLFlBQVksR0FBR3RCLGtCQUFrQixDQUFDb0IsWUFBRCxDQUFqQztBQUNELENBRkQsQ0FFRSxnQkFBTTtBQUNORyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSwwQkFBWjtBQUNEOztBQUVELElBQU1DLFNBQVMsR0FBR0gsWUFBWSxDQUFDWCxHQUFiLElBQW9CRCxhQUFhLENBQUNDLEdBQXBEO0FBQ0EsSUFBTWUsYUFBYSxHQUFHRCxTQUFTLENBQUNiLElBQVYsSUFBaUJGLGFBQWEsQ0FBQ0MsR0FBZCxDQUFrQkMsSUFBekQ7QUFDQSxJQUFNZSxjQUFjLEdBQUdMLFlBQVksQ0FBQ04sUUFBYixJQUF5Qk4sYUFBYSxDQUFDTSxRQUE5RDtBQUNBLElBQU1ZLGVBQWUsR0FBR04sWUFBWSxDQUFDSixTQUFiLElBQTBCUixhQUFhLENBQUNRLFNBQWhFO0FBQ0EsSUFBTVcsY0FBYyxHQUFHUCxZQUFZLENBQUNILFFBQWIsSUFBeUJULGFBQWEsQ0FBQ1MsUUFBOUQsQyxDQUNBOztBQUdBLElBQU1XLE9BQU8sR0FBR2hDLElBQUksQ0FBQ3VCLElBQUwsQ0FBVW5CLEdBQVYsRUFBZUUsTUFBZixDQUFoQjtBQUNBLElBQU0yQixNQUFNLEdBQUcvQixrQkFBa0IsQ0FBQ0YsSUFBSSxDQUFDdUIsSUFBTCxDQUFVUyxPQUFWLEVBQW1CLFFBQW5CLENBQUQsQ0FBakM7O0FBRUEsSUFBTUUsVUFBVSxxQkFDWE4sYUFEVztBQUVkeEIsRUFBQUEsR0FBRyxFQUFFRSxNQUZTO0FBR2RFLEVBQUFBLE9BQU8sRUFBRUcsV0FISztBQUlkd0IsRUFBQUEsV0FBVyxFQUFFLEVBSkM7QUFLZEMsRUFBQUEsYUFBYSxFQUFFO0FBQUEsV0FBTUgsTUFBTSxDQUFDSSxZQUFiO0FBQUE7QUFMRCxFQUFoQjs7QUFRQSxJQUFNckIsTUFBTSxHQUFHO0FBQ2JILEVBQUFBLEdBQUcsb0JBQ0VjLFNBREY7QUFFRHZCLElBQUFBLEdBQUcsRUFBRUUsTUFGSjtBQUdEUSxJQUFBQSxJQUFJLEVBQUVYLGNBQWMsQ0FBQytCLFVBQUQ7QUFIbkIsSUFEVTtBQU1iaEIsRUFBQUEsUUFBUSxFQUFFVyxjQU5HO0FBT2JULEVBQUFBLFNBQVMsb0JBQ0pVLGVBREk7QUFFUDFCLElBQUFBLEdBQUcsRUFBRUc7QUFGRSxJQVBJO0FBV2JjLEVBQUFBLFFBQVEsRUFBRVUsY0FYRztBQVliO0FBQ0FPLEVBQUFBLElBQUksRUFBRTtBQUNKbEMsSUFBQUEsR0FBRyxFQUFFSSxPQUREO0FBRUorQixJQUFBQSxNQUFNLEVBQUU7QUFDTm5DLE1BQUFBLEdBQUcsRUFBRUs7QUFEQyxLQUZKO0FBS0pXLElBQUFBLFNBQVMsRUFBRTtBQUNUaEIsTUFBQUEsR0FBRyxFQUFFTTtBQURJO0FBTFA7QUFiTyxDQUFmO0FBd0JBOEIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCekIsTUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5jb25zdCByZXF1aXJlRm9vbFdlYnBhY2sgPSByZXF1aXJlKCdyZXF1aXJlLWZvb2wtd2VicGFjaycpXG5jb25zdCB3aXRoVHlwZXNjcmlwdCA9IHJlcXVpcmUoJ0B6ZWl0L25leHQtdHlwZXNjcmlwdCcpXG4vL1xuY29uc3QgZGlyID0gcGF0aC5yZXNvbHZlKCcuJylcblxuY29uc3QgYXBwRGlyID0gJy4vc3JjL2FwcCdcbmNvbnN0IGZ1bmN0aW9uc0RpciA9ICcuL3NyYy9mdW5jdGlvbnMnXG5jb25zdCBkaXN0RGlyID0gJy4vZGlzdCdcbmNvbnN0IHB1YmxpY0Rpc3REaXIgPSAnLi9kaXN0L3B1YmxpYydcbmNvbnN0IGZ1bmN0aW9uc0Rpc3REaXIgPSAnLi9kaXN0L2Z1bmN0aW9ucydcbmNvbnN0IG5leHREaXN0RGlyID0gYC4vLi4vLi4vJHtkaXN0RGlyfS9mdW5jdGlvbnMvYXBwYFxuXG5jb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICBhcHA6IHtcbiAgICBkaXI6IGFwcERpcixcbiAgICBuZXh0OiB7XG4gICAgICB3ZWJwYWNrIChjb25maWcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZ1xuICAgICAgfSxcbiAgICB9LFxuICB9LFxuICBmaXJlYmFzZToge1xuICAgIHByb2plY3RJZDogJzxwcm9qZWN0SWQ+JyxcbiAgfSxcbiAgZnVuY3Rpb25zOiB7XG4gICAgZGlyOiBmdW5jdGlvbnNEaXIsXG4gIH0sXG4gIC8vIHBsdWdpbnM6IFtdLFxuICByZXdyaXRlczogW10sXG59XG5cbmNvbnN0IGNvbmZpZ1NvdXJjZSA9IHBhdGguam9pbihkaXIsICdmaXJlc3R1ZGlvLmNvbmZpZycpXG5cbmxldCBjdXN0b21Db25maWcgPSBkZWZhdWx0Q29uZmlnXG5cbnRyeSB7XG4gIGN1c3RvbUNvbmZpZyA9IHJlcXVpcmVGb29sV2VicGFjayhjb25maWdTb3VyY2UpXG59IGNhdGNoIHtcbiAgY29uc29sZS5sb2coJ1VzaW5nIGRlZmF1bHQgYXBwIGNvbmZpZycpXG59XG5cbmNvbnN0IGFwcENvbmZpZyA9IGN1c3RvbUNvbmZpZy5hcHAgfHwgZGVmYXVsdENvbmZpZy5hcHBcbmNvbnN0IGFwcE5leHRDb25maWcgPSBhcHBDb25maWcubmV4dHx8IGRlZmF1bHRDb25maWcuYXBwLm5leHRcbmNvbnN0IGZpcmViYXNlQ29uZmlnID0gY3VzdG9tQ29uZmlnLmZpcmViYXNlIHx8IGRlZmF1bHRDb25maWcuZmlyZWJhc2VcbmNvbnN0IGZ1bmN0aW9uc0NvbmZpZyA9IGN1c3RvbUNvbmZpZy5mdW5jdGlvbnMgfHwgZGVmYXVsdENvbmZpZy5mdW5jdGlvbnNcbmNvbnN0IHJld3JpdGVzQ29uZmlnID0gY3VzdG9tQ29uZmlnLnJld3JpdGVzIHx8IGRlZmF1bHRDb25maWcucmV3cml0ZXNcbi8vIGNvbnN0IHBsdWdpbnNDb25maWcgPSBjdXN0b21Db25maWcucGx1Z2lucyB8fCBkZWZhdWx0Q29uZmlnLnBsdWdpbnNcblxuXG5jb25zdCBhcHBQYXRoID0gcGF0aC5qb2luKGRpciwgYXBwRGlyKVxuY29uc3Qgcm91dGVyID0gcmVxdWlyZUZvb2xXZWJwYWNrKHBhdGguam9pbihhcHBQYXRoLCAncm91dGVyJykpXG5cbmNvbnN0IG5leHRDb25maWcgPSB7XG4gIC4uLmFwcE5leHRDb25maWcsXG4gIGRpcjogYXBwRGlyLFxuICBkaXN0RGlyOiBuZXh0RGlzdERpcixcbiAgYXNzZXRQcmVmaXg6ICcnLFxuICBleHBvcnRQYXRoTWFwOiAoKSA9PiByb3V0ZXIuc3RhdGljUm91dGVzLFxufVxuXG5jb25zdCBjb25maWcgPSB7XG4gIGFwcDoge1xuICAgIC4uLmFwcENvbmZpZyxcbiAgICBkaXI6IGFwcERpcixcbiAgICBuZXh0OiB3aXRoVHlwZXNjcmlwdChuZXh0Q29uZmlnKVxuICB9LFxuICBmaXJlYmFzZTogZmlyZWJhc2VDb25maWcsXG4gIGZ1bmN0aW9uczoge1xuICAgIC4uLmZ1bmN0aW9uc0NvbmZpZyxcbiAgICBkaXI6IGZ1bmN0aW9uc0RpclxuICB9LFxuICByZXdyaXRlczogcmV3cml0ZXNDb25maWcsXG4gIC8vIHBsdWdpbnM6IHBsdWdpbnNDb25maWcsXG4gIGRpc3Q6IHtcbiAgICBkaXI6IGRpc3REaXIsXG4gICAgcHVibGljOiB7XG4gICAgICBkaXI6IHB1YmxpY0Rpc3REaXJcbiAgICB9LFxuICAgIGZ1bmN0aW9uczoge1xuICAgICAgZGlyOiBmdW5jdGlvbnNEaXN0RGlyXG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uZmlnXG4iXX0=